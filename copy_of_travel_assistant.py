# -*- coding: utf-8 -*-
"""Copy of travel_assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3mUwfXHSQ8XwRX1vVVEQYWWwlDhf6Ev
"""

!pip install transformers gradio accelerate bitsandbytes

!pip install peft

from peft import get_peft_model, LoraConfig, TaskType
from sklearn.model_selection import train_test_split

import torch
from transformers import LlamaForCausalLM, LlamaTokenizer
import gradio as gr
from huggingface_hub import login
import random

login('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')

model_name = 'meta-llama/Llama-2-7B-chat-hf'
tokenizer = LlamaTokenizer.from_pretrained(model_name, use_auth_token=True)

tokenizer.pad_token = tokenizer.eos_token

# Load the model with bitsandbytes for 8-bit quantization
model = LlamaForCausalLM.from_pretrained(
    model_name,
    load_in_8bit=True,        # Enable 8-bit quantization
    device_map='auto',        # Automatically place the model on available GPUs
    use_auth_token=True
)

lora_config = LoraConfig(
    r=16,                       # Rank of the adapter
    lora_alpha=32,              # Scaling factor for LoRA
    lora_dropout=0.1,           # Dropout for LoRA
    task_type=TaskType.CAUSAL_LM
)

model = get_peft_model(model, lora_config)

travel_data = [
    {
        "input_text": "Suggest a 3-day itinerary for Paris on a budget.",
        "output_text": "Day 1: Visit the Eiffel Tower, take a Seine river cruise, and explore local cafes. Day 2: Visit the Louvre, walk through the Tuileries Garden, and enjoy a dinner at a bistro. Day 3: Explore Montmartre and enjoy a picnic at Sacré-Cœur."
    },
    {
        "input_text": "Create a romantic 2-day itinerary for Santorini.",
        "output_text": "Day 1: Start with a sunset view in Oia, followed by a candlelight dinner at a restaurant overlooking the caldera. Day 2: Enjoy a beach day at Red Beach and a wine-tasting tour in the local vineyards."
    },
    {
        "input_text": "Plan a family-friendly 4-day trip to Disneyland California.",
        "output_text": "Day 1: Arrive at Disneyland, explore Main Street U.S.A., and visit the Sleeping Beauty Castle. Day 2: Spend the day in Disneyland Park, enjoying rides like Space Mountain and Pirates of the Caribbean. Day 3: Take a break and visit Downtown Disney for shopping and dining. Day 4: Enjoy California Adventure Park, including rides like Radiator Springs Racers and the Incredicoaster."
    },
    {
        "input_text": "Suggest a 5-day itinerary for a backpacking trip in Thailand.",
        "output_text": "Day 1: Arrive in Bangkok, visit the Grand Palace, and explore the local street food scene. Day 2: Take a train to Ayutthaya and spend the day visiting ancient ruins. Day 3: Travel to Chiang Mai, participate in a cooking class, and visit a night market. Day 4: Go on a trek in the mountains and visit hill tribes. Day 5: Relax on the beaches of Krabi and enjoy water sports."
    },
    {
        "input_text": "Create a 3-day cultural itinerary for Kyoto, Japan.",
        "output_text": "Day 1: Visit Kinkaku-ji (Golden Pavilion), explore the Arashiyama Bamboo Grove, and stroll through the gardens of Nijo Castle. Day 2: Spend the day in Gion, experience a traditional tea ceremony, and enjoy a kaiseki dinner. Day 3: Visit Fushimi Inari Taisha Shrine and hike the trails lined with torii gates, then relax at the Philosopher's Path."
    },
    {
        "input_text": "Suggest a 4-day itinerary for a beach vacation in Bali, Indonesia.",
        "output_text": "Day 1: Arrive in Bali, relax at Seminyak Beach, and enjoy a beachside dinner. Day 2: Visit Ubud, explore the Monkey Forest, and visit the Tegalalang Rice Terraces. Day 3: Take a day trip to Nusa Penida for stunning beaches and snorkeling. Day 4: Relax at Jimbaran Beach and enjoy a seafood feast at a beachside restaurant."
    },
    {
        "input_text": "Plan a historical tour for 3 days in Rome.",
        "output_text": "Day 1: Visit the Colosseum, Roman Forum, and Palatine Hill. Day 2: Explore Vatican City, including St. Peter's Basilica and the Sistine Chapel. Day 3: Visit the Pantheon, enjoy a gelato at Piazza Navona, and stroll through the streets of Trastevere."
    },
    {
        "input_text": "Create a 2-day itinerary for a hiking trip in the Swiss Alps.",
        "output_text": "Day 1: Arrive in Interlaken, take the train to Jungfraujoch, and enjoy breathtaking views from the Top of Europe. Day 2: Hike the Eiger Trail, then visit the picturesque village of Grindelwald."
    },
    {
        "input_text": "Suggest a weekend itinerary for New York City.",
        "output_text": "Day 1: Explore Central Park, visit the Metropolitan Museum of Art, and enjoy a Broadway show. Day 2: Walk through Times Square, visit the Statue of Liberty, and end the day with dinner in Chinatown."
    },
    {
        "input_text": "Plan a 3-day itinerary for a nature retreat in Costa Rica.",
        "output_text": "Day 1: Arrive in Arenal, visit the Arenal Volcano National Park, and relax in hot springs. Day 2: Explore the La Fortuna Waterfall and take a canopy tour. Day 3: Head to Manuel Antonio National Park for hiking and beach time."
    },
    {
        "input_text": "Create a 1-day itinerary for a quick visit to Seattle.",
        "output_text": "Morning: Visit Pike Place Market and grab breakfast at a local café. Afternoon: Explore the Space Needle and Chihuly Garden and Glass. Evening: Enjoy dinner at a waterfront restaurant and take a stroll along the Seattle waterfront."
    }
]

# Split the data into training and evaluation datasets
train_data, eval_data = train_test_split(travel_data, test_size=0.2)

# Prepare data for fine-tuning
from transformers import DataCollatorForLanguageModeling
from torch.utils.data import Dataset

class TravelDataset(Dataset):
    def __init__(self, data, tokenizer, max_length=128):
        self.data = data
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        item = self.data[idx]
        inputs = self.tokenizer(item["input_text"], return_tensors="pt", truncation=True, max_length=self.max_length, padding="max_length")
        outputs = self.tokenizer(item["output_text"], return_tensors="pt", truncation=True, max_length=self.max_length, padding="max_length")
        inputs['labels'] = outputs['input_ids']
        return {key: value.squeeze() for key, value in inputs.items()}

train_dataset = TravelDataset(train_data, tokenizer)
eval_dataset = TravelDataset(eval_data, tokenizer)  # Create evaluation dataset
data_collator = DataCollatorForLanguageModeling(tokenizer, mlm=False)

from transformers import Trainer, TrainingArguments

training_args = TrainingArguments(
    output_dir='./results',
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=1,
    per_device_eval_batch_size=1,
    num_train_epochs=1,  # Increase for better results
    weight_decay=0.01,
    logging_dir='./logs'
)

# Fine-tune the model
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,  # Add eval_dataset here
    data_collator=data_collator
)

trainer.train()

random_activities = [
    "Try to find the best local dessert.",
    "Take a picture with a stranger.",
    "Learn a few phrases in the local language.",
    "Join a local dance class.",
    "Visit a local market and haggle.",
    "Find the city's best-kept secret.",
    "Try a food you’ve never had before.",
    "Participate in a community event.",
    "Take a cooking class to learn local recipes.",
    "Go on a scavenger hunt with locals.",
    "Spend a day volunteering at a local charity.",
    "Create a travel vlog or photo diary of your trip.",
    "Attend a live music event or concert.",
    "Visit an art gallery and try to interpret the pieces.",
    "Take a scenic hike and enjoy nature.",
    "Explore a nearby town or village you've never visited.",
    "Find a local festival or fair to join.",
    "Take a quirky tour, like a ghost or street art tour.",
    "Try to locate the oldest building or landmark in the area.",
    "Attend a local sports game and cheer for the team.",
    "Find and take a picture with a local celebrity or influencer.",
    "Join a guided meditation or yoga session in a park.",
    "Attend a traditional cooking workshop.",
    "Participate in a local charity run or walk.",
    "Take a painting or pottery class with local artists.",
    "Join a local hiking group for a day hike.",
    "Visit a local vineyard or brewery and do a tasting.",
    "Attend a storytelling night or open mic event.",
    "Go on a bike tour around the city.",
    "Explore the city using a segway.",
    "Try your hand at a local sport or activity, like surfing or skiing.",
    "Take a sunset cruise or boat ride.",
    "Visit a local animal sanctuary or farm.",
    "Explore the city by renting a tandem bike with a friend.",
    "Try to find the best local coffee shop and sample their brews.",
    "Participate in a local art project or mural painting.",
    "Attend a cultural exchange event.",
    "Find a hidden gem café and spend time reading a book.",
    "Attend a fashion show or local design exhibition.",
    "Join a local fitness class, like Zumba or kickboxing.",
    "Take part in a local music jam session.",
    "Visit a botanical garden and take pictures of the plants.",
    "Attend a local theater performance or play.",
    "Find a local spot to stargaze and enjoy the night sky.",
    "Join a photography walk to capture the city.",
    "Try to learn a traditional dance from the region.",
    "Visit a nearby beach and build a sandcastle.",
    "Spend a day exploring a national park.",
    "Try your luck at a local casino or gaming hall.",
    "Visit a flea market and hunt for unique souvenirs.",
    "Join a local book club meeting.",
    "Explore historical sites and learn about the local history.",
    "Go birdwatching in a nearby nature reserve.",
    "Attend a workshop on traditional crafts or trades.",
    "Try to replicate a local dish from a cooking class.",
    "Explore the city using public transportation for a day.",
    "Try out local street food vendors.",
    "Find a karaoke bar and sing your heart out.",
    "Join a local walking group for daily exercise.",
    "Attend a cultural festival or fair.",
    "Try to create a local dish with a twist of your own.",
    "Visit an escape room with friends or family.",
    "Participate in a charity or community cleanup event.",
    "Attend a themed costume party in the area.",
    "Go geocaching for a fun outdoor treasure hunt.",
    "Take a hot air balloon ride for stunning views.",
    "Explore local urban gardens or green spaces.",
    "Join a drum circle or music workshop.",
    "Find a local aquarium and explore marine life.",
    "Take a guided night walk to see the city differently.",
    "Join a dance flash mob if you can find one.",
    "Participate in a local trivia night at a pub.",
    "Take a tour of local breweries or distilleries.",
    "Spend a day hiking in the mountains.",
    "Attend a local cooking competition or food festival.",
    "Try to catch a local theater production.",
    "Visit a local planetarium or science center.",
    "Join a local environmental awareness group.",
    "Participate in a local photography contest.",
    "Try your hand at pottery or sculpture at a local studio.",
    "Attend a local high school sports event.",
    "Participate in a cheese-making workshop.",
    "Try to find a local petting zoo and spend time there.",
    "Visit an art installation or public art display.",
    "Find a community garden and volunteer.",
    "Attend a workshop on local history or folklore.",
    "Explore a local wildlife refuge.",
    "Go for a scenic drive through the countryside.",
    "Attend a virtual reality gaming experience.",
    "Participate in a writing workshop or poetry slam.",
    "Join a local history tour and learn about the area.",
    "Try out an escape room for a fun challenge.",
    "Visit a local zoo and learn about the animals.",
    "Attend a local film festival.",
    "Join a sewing or crafting circle.",
    "Try to find a local café with a view and relax there.",
    "Attend a painting or art class.",
    "Explore local historical reenactments or festivals.",
    "Go to a local bookshop and find a new read.",
    "Join a yoga retreat or wellness weekend.",
    "Attend a workshop on mindfulness or meditation.",
    "Try to take a class on a new skill or hobby.",
    "Find a local community orchestra or choir to join.",
    "Attend a live comedy show.",
    "Explore local hiking trails and nature reserves.",
    "Visit a local farmer's market and try local produce.",
    "Join a community sports league for a fun challenge.",
    "Try to capture the local sunset with your camera."
]

# Function to get a random activity
def get_random_activity():
    return random.choice(random_activities)

# Define the function to generate itineraries based on user input
def generate_itinerary(location, days, budget, interests):
    prompt = f"Create a {days}-day itinerary for {location} based on a {budget} budget, focusing on {interests}."
    inputs = tokenizer(prompt, return_tensors="pt").to('cuda')
    outputs = model.generate(**inputs, max_length=800, temperature=0.2)
    itinerary = tokenizer.decode(outputs[0], skip_special_tokens=True)
    activity = get_random_activity()  # Get a random activity
    return itinerary, activity

# Define the Gradio interface
with gr.Blocks() as travel_planner:
    gr.Markdown("# AI-Based Travel Planner and Guide")
    location = gr.Textbox(label="Destination", placeholder="Enter your travel destination")
    days = gr.Slider(label="Number of Days", minimum=1, maximum=14, step=1)
    budget = gr.Dropdown(label="Budget", choices=["Low", "Medium", "High"])
    interests = gr.Textbox(label="Interests", placeholder="Enter interests (e.g., adventure, relaxation, culture)")

    itinerary_output = gr.Textbox(label="Generated Itinerary", interactive=False)
    activity_output = gr.Textbox(label="Random Activity", interactive=False)

    generate_button = gr.Button("Generate Itinerary and Activity")
    generate_button.click(
        fn=generate_itinerary,
        inputs=[location, days, budget, interests],
        outputs=[itinerary_output, activity_output]
    )

# Launch the Gradio app
travel_planner.launch()